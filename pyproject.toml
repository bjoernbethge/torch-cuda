[project]
name = "torch-cuda"
version = "0.1.0"
description = "PyTorch CUDA template for GPU-accelerated machine learning projects"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Björn Bethge", email = "bjoern.bethge@gmail.com" }
]
maintainers = [
    { name = "Björn Bethge", email = "bjoern.bethge@gmail.com" }
]
requires-python = ">=3.11"
keywords = ["pytorch", "cuda", "machine-learning", "deep-learning", "gpu"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.7.0,<3.0.0",
    "torchvision>=0.19.0,<1.0.0", # Compatible with torch 2.7.x
    "numpy>=1.24.0,<3.0.0", # Core numerical computing
    "polars>=1.30.0",
    "plotly-express>=0.4.1",
    "dash-bootstrap-components>=2.0.3",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

# Data science and visualization
data = [
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.4.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.28.0",
]

# Additional ML utilities
ml = [
    "mlflow>=2.22.0",
    "polars>=1.30.0",
    "plotly-express>=0.4.1",
    "dash-bootstrap-components>=2.0.3",
]

# Performance monitoring
monitoring = [
    "wandb>=0.16.0",           # Experiment tracking
    "tensorboard>=2.15.0",     # TensorBoard logging
    "psutil>=5.9.0",           # System monitoring
]

# All optional dependencies
all = [
    "torch-cuda[dev,data,ml,monitoring]",
]

[project.urls]
Homepage = "https://github.com/bjoernbethge/torch-cuda"
Repository = "https://github.com/bjoernbethge/torch-cuda"
Documentation = "https://github.com/bjoernbethge/torch-cuda#readme"
"Bug Tracker" = "https://github.com/bjoernbethge/torch-cuda/issues"
Changelog = "https://github.com/bjoernbethge/torch-cuda/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.uv]
python-preference = "only-managed"
python-downloads = "automatic"
link-mode = "copy"
compile-bytecode = true
cache-dir = ".uv-cache"

# PyTorch CUDA index configuration
[[tool.uv.index]]
name = "pytorch-cuda"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.uv.sources]
torch = [{ index = "pytorch-cuda" }]
torchvision = [{ index = "pytorch-cuda" }]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.hatch.build.targets.wheel]
packages = ["src/torch_cuda"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
